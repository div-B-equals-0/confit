
* Notebooks
- These will be used for exploration and demonstration of the code, plus producing graphics output
- Although I do not want to put too much code in them, anything useful should be moved to the library

** Converting notebooks to python scripts
- I can use ~jupytext~ for this to allow bidirectional syncing
- Run the following when we have made new notebooks to pair them with python scripts
  #+begin_src sh :dir ../notebooks :results output verbatim
    jupytext --set-formats 'ipynb,py:light' *.ipynb *.py
  #+end_src

  #+RESULTS:
  #+begin_example
  [jupytext] Reading demo01-basic.ipynb in format ipynb
  [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  [jupytext] Loading demo01-basic.py
  [jupytext] Updating the timestamp of demo01-basic.py
  [jupytext] Reading demo01-basic.py in format py
  [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  [jupytext] Loading demo01-basic.ipynb
  [jupytext] Updating demo01-basic.ipynb
  [jupytext] Updating demo01-basic.py
  [jupytext] Reading demo02-emcee.py in format py
  [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  [jupytext] Updating demo02-emcee.ipynb
  [jupytext] Updating demo02-emcee.py
  #+end_example
- Then after editing either the python or the notebook version, we can sync them as follows
  #+begin_src sh :dir ../notebooks :results output verbatim
    jupytext --show-changes --update --sync *.py
  #+end_src

  #+RESULTS:
  : [jupytext] Reading demo01-basic.py in format py
  : [jupytext] Loading demo01-basic.ipynb
  : [jupytext] Updating the timestamp of demo01-basic.py
  : [jupytext] Reading demo02-emcee.py in format py
  : [jupytext] Loading demo02-emcee.ipynb
  : [jupytext] Updating the timestamp of demo02-emcee.py

  where the ~--show-changes~ flag displays a diff of what has changed and the ~--update~ flag preserves the output cells in the notebook, even if it is being updated from the python file

  #+RESULTS:
  : [jupytext] Reading demo01-basic.ipynb in format ipynb

- Do I want to automate this?

* Testing

** Testing my library code with ~pytest~

** Testing a set of notebooks with ~pytest~ and ~nbval~
- See [[https://semaphoreci.com/blog/test-jupyter-notebooks-with-pytest-and-nbmake]["How to Test Jupyter Notebooks with Pytest and Nbmake"]] by Alex Remedios

** Testing functions within a notebook with ~ipytest~
- See [[https://medium.com/@mefengl/using-pytest-in-jupyter-notebooks-a-practical-guide-1ba8e02af288]["Using Pytest in Jupyter Notebooks: A Practical Guide"]] by Mefeng Lin
* Requirements
- do I want to use a requirements.txt file?
- or pyproject.toml?
* Packaging
** What sort of system should I use?
- I have previously tried poetry, but there seem to be a lot more options these days
* Documentation
** TODO Building a prettier version of docs for github
- The org files are great for use within emacs, but github doesn't render them nicely
  - In particular, it does not support mathjax latex rendering
- I could maybe export to markdown, but at that point I might as well export to html
